Hay varias funciones de "delete" que puede que deba usar:
	mlx_delete_image

El mlx_init() parece estar allocando memoria, devuelve un puntero a mlx_t
que en definitiva es un apuntador a este struct:
	typedef struct mlx
	{
		void*       window;
		void*       context;
		int32_t     width;
		int32_t     height;
		double      delta_time;
	}   mlx_t;	

Luego está el mlx_terminate() que recibe un puntero a mlx_t, por
lo que parece que debería hacerse cargo de lo allocado por mlx_init().


********************************************************************************
********************************************************************************
********************************************************************************
Case 1: just opening a map, closing with escape key.
==142574== ERROR SUMMARY: 34 errors from 34 contexts (suppressed: 0 from 0)

De estos, 24 vienen de fdf_plane_analysis() llamando a fdf_create_plane().

Empezaré con este muy repetido y aislado:
...
==142331==    at 0x4845828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==142331==    by 0x10AA1D: ft_mx_create (ft_mx_create.c:23)
==142331==    by 0x10B918: ft_vx_xproduct (ft_vx_xproduct.c:21)
==142331==    by 0x10D7B4: fdf_create_plane (fdf_create_plane.c:30)
==142331==    by 0x10C34D: fdf_plane_analysis (fdf_set_edge_visibility.c:41)
==142331==    by 0x10C6FA: fdf_set_edge_visibility (fdf_set_edge_visibility.c:155)
...

(1) fdf_create_plane no destruía una matriz temporal y el resto de matrices las liberaba
en vez de destruirlas.
ya con esto se redujo de 34 a 15 errores.

Toma 2: resuelto (1) cargar mapa válido, salir inmediatamente con escape.
==148731== ERROR SUMMARY: 15 errors from 15 contexts (suppressed: 0 from 0)

Reduciendo el output de valgrind, los registros interesantes (definitely lost e
indirectly lost) son:
==181316== 743,936 bytes in 13 blocks are indirectly lost in loss record 92 of 94
==181316==    at 0x484A993: calloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==181316==    by 0x10AA45: ft_mx_create (ft_mx_create.c:26)
==181316==    by 0x10BBED: fdf_get_vertex_mx (fdf_get_vertex_mx.c:25)
==181316==    by 0x10CE76: fdf_tesselate_map (fdf_tesselate_map.c:45)
==181316==    by 0x10F9BF: fdf_render (fdf_render.c:140)
==181316==    by 0x10FBC0: fdf_generichook (fdf_generichook.c:25)
==181316==    by 0x115D98: mlx_loop (in /home/lluque/011_fdf/repo_github/bin/mandatory/fdf)
==181316==    by 0x10FDA8: fdf_start_gui (fdf_start_gui.c:40)
==181316==    by 0x10A8B5: main (fdf_main.c:36)
==181316== 
==181316== 744,248 (312 direct, 743,936 indirect) bytes in 13 blocks are definitely lost in loss record 93 of 94
==181316==    at 0x4845828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==181316==    by 0x10AA1D: ft_mx_create (ft_mx_create.c:23)
==181316==    by 0x10BBED: fdf_get_vertex_mx (fdf_get_vertex_mx.c:25)
==181316==    by 0x10CE76: fdf_tesselate_map (fdf_tesselate_map.c:45)
==181316==    by 0x10F9BF: fdf_render (fdf_render.c:140)
==181316==    by 0x10FBC0: fdf_generichook (fdf_generichook.c:25)
==181316==    by 0x115D98: mlx_loop (in /home/lluque/011_fdf/repo_github/bin/mandatory/fdf)
==181316==    by 0x10FDA8: fdf_start_gui (fdf_start_gui.c:40)
==181316==    by 0x10A8B5: main (fdf_main.c:36)
==181316== 
==181316== 2,200,648 bytes in 55,005 blocks are definitely lost in loss record 94 of 94
==181316==    at 0x4845828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==181316==    by 0x110D3A: ft_calloc (ft_calloc.c:22)
==181316==    by 0x10D1B5: fdf_create_object (fdf_create_object.c:64)
==181316==    by 0x110405: fdf_create_fdf (fdf_create_fdf.c:26)
==181316==    by 0x10A863: main (fdf_main.c:32)
==181316== 
==181316== LEAK SUMMARY:
==181316==    definitely lost: 2,200,960 bytes in 55,018 blocks
==181316==    indirectly lost: 743,936 bytes in 13 blocks
==181316==      possibly lost: 0 bytes in 0 blocks
==181316==    still reachable: 310,971 bytes in 3,042 blocks
==181316==         suppressed: 0 bytes in 0 blocks
==181316== 
==181316== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Luego de liberar ft_mx_destroy(object->model_mx) en los sucesivos renderizados
a nivel de fdf_tesselate_map():

==181595== 1,536 bytes in 12 blocks are indirectly lost in loss record 69 of 94
==181595==    at 0x484A993: calloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==181595==    by 0x10AA45: ft_mx_create (ft_mx_create.c:26)
==181595==    by 0x10B2F2: ft_mx_mult (ft_mx_mult.c:52)
==181595==    by 0x10CCFE: fdf_create_rot_mx (fdf_create_rotmx.c:98)
==181595==    by 0x10F543: fdf_setup_world (fdf_render.c:32)
==181595==    by 0x10F9F8: fdf_render (fdf_render.c:144)
==181595==    by 0x10FBD0: fdf_generichook (fdf_generichook.c:25)
==181595==    by 0x115DA8: mlx_loop (in /home/lluque/011_fdf/repo_github/bin/mandatory/fdf)
==181595==    by 0x10FDB8: fdf_start_gui (fdf_start_gui.c:40)
==181595==    by 0x10A8B5: main (fdf_main.c:36)
...
==181595== 1,824 (288 direct, 1,536 indirect) bytes in 12 blocks are definitely lost in loss record 72 of 94
==181595==    at 0x4845828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==181595==    by 0x10AA1D: ft_mx_create (ft_mx_create.c:23)
==181595==    by 0x10B2F2: ft_mx_mult (ft_mx_mult.c:52)
==181595==    by 0x10CCFE: fdf_create_rot_mx (fdf_create_rotmx.c:98)
==181595==    by 0x10F543: fdf_setup_world (fdf_render.c:32)
==181595==    by 0x10F9F8: fdf_render (fdf_render.c:144)
==181595==    by 0x10FBD0: fdf_generichook (fdf_generichook.c:25)
==181595==    by 0x115DA8: mlx_loop (in /home/lluque/011_fdf/repo_github/bin/mandatory/fdf)
==181595==    by 0x10FDB8: fdf_start_gui (fdf_start_gui.c:40)
==181595==    by 0x10A8B5: main (fdf_main.c:36)
...
==181595== 2,200,648 bytes in 55,005 blocks are definitely lost in loss record 94 of 94
==181595==    at 0x4845828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==181595==    by 0x110D4A: ft_calloc (ft_calloc.c:22)
==181595==    by 0x10D1C5: fdf_create_object (fdf_create_object.c:64)
==181595==    by 0x110415: fdf_create_fdf (fdf_create_fdf.c:26)
==181595==    by 0x10A863: main (fdf_main.c:32)
==181595==
==181595== LEAK SUMMARY:
==181595==    definitely lost: 2,200,936 bytes in 55,017 blocks
==181595==    indirectly lost: 1,536 bytes in 12 blocks
==181595==      possibly lost: 0 bytes in 0 blocks
==181595==    still reachable: 310,971 bytes in 3,042 blocks
==181595==         suppressed: 0 bytes in 0 blocks
==181595==
==181595== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Encontré matrices auxiliares sin liberar en fdf_setup_world(), fdf_setup_camera(),
fdf_setup_screen() y que no se liberaba tampoco la matriz del nivel antes de generar la nueva.
Luego de estos arreglos:
==186035== 2,200,648 bytes in 55,005 blocks are definitely lost in loss record 92 of 92
==186035==    at 0x4845828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==186035==    by 0x110E1C: ft_calloc (ft_calloc.c:22)
==186035==    by 0x10D1C5: fdf_create_object (fdf_create_object.c:64)
==186035==    by 0x1104E7: fdf_create_fdf (fdf_create_fdf.c:26)
==186035==    by 0x10A863: main (fdf_main.c:32)
==186035==
==186035== LEAK SUMMARY:
==186035==    definitely lost: 2,200,648 bytes in 55,005 blocks
==186035==    indirectly lost: 0 bytes in 0 blocks
==186035==      possibly lost: 0 bytes in 0 blocks
==186035==    still reachable: 310,971 bytes in 3,042 blocks
==186035==         suppressed: 0 bytes in 0 blocks
==186035==
==186035== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

fdf_destroy_object() no liberaba al propio object.......

***********************************************************************
==187385== 2,200,160 bytes in 55,004 blocks are definitely lost in loss record 82 of 82
==187385==    at 0x4845828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==187385==    by 0x110E28: ft_calloc (ft_calloc.c:22)
==187385==    by 0x10E778: fdf_create_line (fdf_drw_edges.c:53)
==187385==    by 0x10EE83: fdf_drw_edges (fdf_drw_edges.c:135)
==187385==    by 0x10FA71: fdf_setup_image (fdf_render.c:137)
==187385==    by 0x10FB80: fdf_render (fdf_render.c:162)
==187385==    by 0x10FCAE: fdf_generichook (fdf_generichook.c:25)
==187385==    by 0x115E88: mlx_loop (in /home/lluque/011_fdf/repo_github/bin/mandatory/fdf)
==187385==    by 0x10FE96: fdf_start_gui (fdf_start_gui.c:40)
==187385==    by 0x10A8B5: main (fdf_main.c:36)
==187385==
==187385== LEAK SUMMARY:
==187385==    definitely lost: 2,200,160 bytes in 55,004 blocks
==187385==    indirectly lost: 0 bytes in 0 blocks
==187385==      possibly lost: 0 bytes in 0 blocks
==187385==    still reachable: 310,971 bytes in 3,042 blocks
==187385==         suppressed: 0 bytes in 0 blocks
==187385==
==187385== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

fdf_drw_edges() the freeing of line was incorrectly made outside the loop.

after this:
==190936== LEAK SUMMARY:
==190936==    definitely lost: 0 bytes in 0 blocks
==190936==    indirectly lost: 0 bytes in 0 blocks
==190936==      possibly lost: 0 bytes in 0 blocks
==190936==    still reachable: 310,971 bytes in 3,042 blocks
==190936==         suppressed: 0 bytes in 0 blocks
==190936==
==190936== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

********************************************************************************
********************************************************************************
********************************************************************************
Case 2: just opening a map but closing with windows X button.
All clear, valgrind_log7

==192644== LEAK SUMMARY:
==192644==    definitely lost: 0 bytes in 0 blocks
==192644==    indirectly lost: 0 bytes in 0 blocks
==192644==      possibly lost: 0 bytes in 0 blocks
==192644==    still reachable: 310,971 bytes in 3,042 blocks
==192644==         suppressed: 0 bytes in 0 blocks
==192644== 
==192644== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

********************************************************************************
********************************************************************************
********************************************************************************
Case 3: opening a map and changing the projection full round back to planar, then
closing with escape/X button.
All clear, valgrind_log8

==192925== LEAK SUMMARY:
==192925==    definitely lost: 0 bytes in 0 blocks
==192925==    indirectly lost: 0 bytes in 0 blocks
==192925==      possibly lost: 0 bytes in 0 blocks
==192925==    still reachable: 310,971 bytes in 3,042 blocks
==192925==         suppressed: 0 bytes in 0 blocks
==192925==
==192925== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

********************************************************************************
********************************************************************************
********************************************************************************
Case 4: opening a map, stay on planar, go nuts rotating in every way, then
closing with escape/X button.
All clear, valgrind_log10

==193126== LEAK SUMMARY:
==193126==    definitely lost: 0 bytes in 0 blocks
==193126==    indirectly lost: 0 bytes in 0 blocks
==193126==      possibly lost: 0 bytes in 0 blocks
==193126==    still reachable: 310,971 bytes in 3,042 blocks
==193126==         suppressed: 0 bytes in 0 blocks
==193126==
==193126== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

********************************************************************************
********************************************************************************
********************************************************************************
Case 5: Same as 4  but circling round projections, rotating randomly in each
projection, closing in random projection, then closing with escape/X button.
All clear, valgrind_log11

==193408== LEAK SUMMARY:
==193408==    definitely lost: 0 bytes in 0 blocks
==193408==    indirectly lost: 0 bytes in 0 blocks
==193408==      possibly lost: 0 bytes in 0 blocks
==193408==    still reachable: 310,971 bytes in 3,042 blocks
==193408==         suppressed: 0 bytes in 0 blocks
==193408== 
==193408== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

********************************************************************************
********************************************************************************
********************************************************************************
Case 6: removing autoscaling, translating and scaling, circling through different
projections (with and without autoscaling active), going nuts rotating, translating,
and scaling.
All clear, valgrind_log12

==193846== LEAK SUMMARY:
==193846==    definitely lost: 0 bytes in 0 blocks
==193846==    indirectly lost: 0 bytes in 0 blocks
==193846==      possibly lost: 0 bytes in 0 blocks
==193846==    still reachable: 310,971 bytes in 3,042 blocks
==193846==         suppressed: 0 bytes in 0 blocks
==193846== 
==193846== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
but circling round projections, rotating randomly in each
projection, closing in random projection, then closing with escape/X button.
All clear, valgrind_log11

********************************************************************************
********************************************************************************
********************************************************************************
Case 7: resizing window, with/without autoscale, toggling through projections
All clear, valgrind_log13

==194894== LEAK SUMMARY:
==194894==    definitely lost: 0 bytes in 0 blocks
==194894==    indirectly lost: 0 bytes in 0 blocks
==194894==      possibly lost: 0 bytes in 0 blocks
==194894==    still reachable: 310,971 bytes in 3,042 blocks
==194894==         suppressed: 0 bytes in 0 blocks
==194894== 
==194894== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

********************************************************************************
********************************************************************************
********************************************************************************
Case 7: resizing window to minimum possible resizing back to something,
with/without autoscale, toggling through projections, rotating, scaling, translating
with window on minimal size
All clear, valgrind_log14

==196165== LEAK SUMMARY:
==196165==    definitely lost: 0 bytes in 0 blocks
==196165==    indirectly lost: 0 bytes in 0 blocks
==196165==      possibly lost: 0 bytes in 0 blocks
==196165==    still reachable: 310,971 bytes in 3,042 blocks
==196165==         suppressed: 0 bytes in 0 blocks
==196165== 
==196165== ERROR SUMMARY 0 errors from 0 contexts (suppressed: 0 from 0)

********************************************************************************
********************************************************************************
********************************************************************************
Case 7: wrong filename
All clear, valgrind_log15

==196543== Memcheck, a memory error detector
==196543== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==196543== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==196543== Command: bin/mandatory/fdf data/WRONG.fdf
==196543== 
==196543== 
==196543== HEAP SUMMARY:
==196543==     in use at exit: 0 bytes in 0 blocks
==196543==   total heap usage: 51 allocs, 51 frees, 229 bytes allocated
==196543== 
==196543== All heap blocks were freed -- no leaks are possible
==196543== 
==196543== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

********************************************************************************
********************************************************************************
********************************************************************************
Case 7: 1x1 map, going nuts on everything
All clear, valgrind_log16

==197015== LEAK SUMMARY:
==197015==    definitely lost: 0 bytes in 0 blocks
==197015==    indirectly lost: 0 bytes in 0 blocks
==197015==      possibly lost: 0 bytes in 0 blocks
==197015==    still reachable: 310,971 bytes in 3,042 blocks
==197015==         suppressed: 0 bytes in 0 blocks
==197015==
==197015== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

********************************************************************************
********************************************************************************
********************************************************************************
Case 7: 0x0 map (no newline)
All clear, valgrind_log17

********************************************************************************
********************************************************************************
********************************************************************************
Case 7: 0x0 map (WITH newline), going nuts on everything
PROBLEMS, valgrind_log17

==197652== 
==197652== LEAK SUMMARY:
==197652==    definitely lost: 8 bytes in 1 blocks
==197652==    indirectly lost: 0 bytes in 0 blocks
==197652==      possibly lost: 0 bytes in 0 blocks
==197652==    still reachable: 17 bytes in 2 blocks
==197652==         suppressed: 0 bytes in 0 blocks
==197652== 
==197652== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

ft_mx_load_file()'s supporting function free_splitted_from() didn't free
the char** when from == 0, just the strings

After fixing, I paid closer attention to ft_gnl()'s leaks, there's the
one associated to the static variable, but this time there's one more:

==207052== Memcheck, a memory error detector
==207052== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==207052== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==207052== Command: bin/mandatory/fdf data/0x0.fdf
==207052==
==207052==
==207052== HEAP SUMMARY:
==207052==     in use at exit: 17 bytes in 2 blocks
==207052==   total heap usage: 66 allocs, 64 frees, 345 bytes allocated
==207052==
==207052== 1 bytes in 1 blocks are still reachable in loss record 1 of 2
==207052==    at 0x4845828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==207052==    by 0x111E8D: resize_buffer (ft_gnl.c:58)			<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
==207052==    by 0x112000: extract_line (ft_gnl.c:90)
==207052==    by 0x112149: ft_gnl (ft_gnl.c:126)
==207052==    by 0x10AFC1: ft_mx_load_file (ft_mx_load_file.c:122)
==207052==    by 0x10A816: main (fdf_main.c:29)
==207052==
==207052== 16 bytes in 1 blocks are still reachable in loss record 2 of 2
==207052==    at 0x4845828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==207052==    by 0x1122F7: ft_gnl_init_struct (ft_gnl_utils.c:44)
==207052==    by 0x112083: get_arch_data (ft_gnl.c:105)
==207052==    by 0x1120DA: ft_gnl (ft_gnl.c:117)
==207052==    by 0x10AFC1: ft_mx_load_file (ft_mx_load_file.c:122)
==207052==    by 0x10A816: main (fdf_main.c:29)
==207052==
==207052== LEAK SUMMARY:
==207052==    definitely lost: 0 bytes in 0 blocks
==207052==    indirectly lost: 0 bytes in 0 blocks
==207052==      possibly lost: 0 bytes in 0 blocks
==207052==    still reachable: 17 bytes in 2 blocks
==207052==         suppressed: 0 bytes in 0 blocks
==207052==
==207052== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

After lots of tests and investigations, I figured out that this was due to
not keep calling ft_gnl() from ft_mx_load_file() once it didn't need to. With
just one valid line from ft_gnl(), ft_mx_load_file() has all the information
it needs to conclude that the file is in a non-valid format, so no more lines
are needed from ft_gnl() which never frees the data component of the archive
struct.

It was fixed, including the persistent "16 bytes in 1 blocks" message, just by
adding a loop freeing every remaining lines until ft_gnl() returns a NULL.
This was achieved throug fdf_empty_gnl_mem().

